# 深入思考
DEEP_THINKING_AGENT_PROMPT_o1 = """
# 你的角色
深度思考专家

# 你的任务
将下面的任务根据我的思考方式，提出一个经过逐层深入思考的解决方案

# 我的问题
---
{question}
---

# 工作流
0. 你需要在最开始识别问题中的限制范围，所有的回答都要在限制范围内进行，比如：时间、空间、资源、标的等等，如果没有限制，你可以自定义一个范围较广泛的限制
1. 为这个问题提供一个尽可能考虑完整的解决方案
2. 在这个基础上，进行反思，提出一些5-10个改进方案
3. 最后针对这个改进后的方案，为这个问题所处领域针对性做优化
4. 将经过上述两次优化之后的结果，整合输出为一个最终的markdown格式的解决方案

# 注意
- 你每次回答都只需要详细完成其中一个步骤的内容，当我说继续的时候，你再开始下一步的工作
- 当完成其中一个步骤之后，你需要输出"[Step End]"表示当前步骤完成
- 当所有步骤完成之后，你需要输出"[END]"表示你的回答全部结束
- 你不需要给出执行的结果，你只需要使用文字进行回答，阐述清楚所有的解决方案，这意味着你不需要：写代码、写论文等等具体的执行

- 你每一个步骤的标题必须以#号开头，后面跟上一个符合内容的标题，参考：
# 1. 初步思考
# 2. 改进方案
# 3. 领域优化
# 4. 最终方案

# 强调
- 你不需要撰写示例代码或者执行文本创作，只需要提供思考过程
- 你在最后需要输出的是一个优化后的最终方案
- 每个步骤都必须包含详细的细节，具有强可操作性
- 最终方案必须用markdown格式输出，参考格式：
```markdown
XXXX(这里是你优化后的方案)
```
[END]
- 当所有步骤完成之后，你需要输出"[END]"表示你的回答全部结束

现在，请开始工作流第一步：1. XXX

"""


# 深度长文撰写示例
EXAMPLE_CONTENT_WRITING = """
# 技术趋势分析

## 1. 技术演进梳理

### 1.1 技术发展历程

#### 历史回顾

人工智能（AI）技术的演进历程可以追溯到上世纪中期，经历了数次重大变革与发展。人工智能这一概念最早于1956年的达特茅斯会议上被提出，这是人工智能领域的奠基时刻。在这次会议上，数学家与计算机科学家们共同探讨了机器如何模拟人的智能行为，标志着人工智能正式作为一门学科独立出现。彼时，研究者们主要通过规则驱动的方法，试图使用逻辑推理和符号系统模拟人的思维模式。这种基于符号的人工智能（Symbolic AI）也被称为“GOFAI”（Good Old-Fashioned AI），其代表性的工作包括专家系统的研发。这类系统依赖大量的规则库和逻辑推理机制，在特定领域表现出色，但由于其对于知识表示的依赖以及对复杂环境的适应性较差，逐渐暴露出局限性。

随着计算能力的提升和数据规模的扩大，人工智能在20世纪80年代迎来了神经网络（Neural Networks）复兴的浪潮。早期的神经网络模型，如感知机，虽然从理论上证明了其强大的学习能力，但由于当时计算能力有限且缺乏足够的数据支持，其应用受到了限制。直到1986年，著名计算机科学家杰弗里·辛顿（Geoffrey Hinton）和他的同事提出了反向传播算法（Backpropagation），这一算法能够有效解决多层神经网络的训练问题，神经网络才开始重新受到重视。

21世纪初，机器学习逐渐成为人工智能领域的主流方法。与基于规则的人工智能不同，机器学习通过从大量数据中学习模式和规律，使得计算机能够自动进行决策和预测。尤其是监督学习、无监督学习和强化学习等不同的学习范式被广泛应用于诸多领域。从这一时期开始，人工智能逐渐从理论研究向实际应用转变，计算机视觉、自然语言处理、语音识别等领域的突破性进展也开始出现。

在近十年间，深度学习（Deep Learning）的崛起引领了人工智能发展的新高潮。深度学习的核心是利用多层神经网络进行特征提取和表示，能够自动从原始数据中学习到复杂的特征表示。2012年，AlexNet在ImageNet图像识别比赛中一举夺魁，深度学习自此成为人工智能领域的焦点技术。与传统的浅层学习模型相比，深度学习模型在处理大规模数据和复杂任务时展现出了强大的能力。

"""

# 分配任务
TASK_DELEGATION_PROMPT = """
# 你的任务
你需要判断我下面的任务属于我的分类里的哪一类任务，以方便我将这个任务分配给对应的专家处理。

# 我的任务
{task}

# 已知条件
目前我能处理的任务包含:
- coding
- text generation
- travel planning

# 要求
- 你必须在上述分类里做选择
- 你的输出必须是json格式，key是task_type, value是字符串
参考输出：
```json
{{
    "task_type": "这里是任务分类"
}}
```

现在，请输出json：
"""


# 展开思维链结果
ELABORATE_DEEP_THINK_PROMPT = """
以下是一个问题的解决方案，你需要根据我的要求一步一步根据这个方案回答问题。

# 问题
{question}
---

# 解决方案
---
{deep_think_result}
---

# 要求
- 你每次回答都只需要详细展开其中一个步骤的内容，需要有分点，每个分点下面都需要有1-5段详细的文字阐述
- 当我说继续的时候，你再开始下一步
- 你需要尽可能详细回答我的问题，需要具体而不是简单的描述
- 你每次回答都必须以#号加上一个符合内容的标题开头
- 每个步骤完成之后，你需要输出"[Step End]"表示当前步骤完成
- 当最终输出所有我需要的回答之后，你需要输出"[END]"表示你的回答全部结束
- 你必须按照实践需求编写详细的可行的回答，不能是示例或者不完整的回答

# 注意
- 你的输出必须比我给出的示例更详细，更具体

"""

# 代码思维链展开提示词
ELABORATE_DEEP_THINK_PROMPT_CODING = """
以下是一个关于编程问题的解决方案，你需要根据我的要求一步一步撰写所有的代码。

# 问题
{question}
---

# 解决方案
---
{deep_think_result}
---

# 你的工作流
1. 你首先需要将上述方案拆解成几个完整的分块，每个分块都是一个完整的代码块，实现某个功能，涵盖上述方案中涉及到的关于该模块的所有功能。注意：此处你必须详细总结上述方案中包含的所有功能，分点列举。
2. 接下来，你每次回答都仅需要详细按照步骤撰写上述分块中的某一个分块的代码，当我说继续的时候，你再开始下一步

# 要求
- 你需要尽可能详细地撰写每个步骤的代码
- 你每次回答都必须以#号加上一个符合内容的标题开头，比如:
    - # 代码模块拆解
    - # 1. XXX
    - # 2. XXX
    ...
- 每个步骤完成之后，你需要输出"[Step End]"表示当前步骤完成
- 当最终输出所有步骤的代码后，你需要输出"[END]"表示你的回答全部结束
- 你必须按照实践需求编写详细的可行的回答，不能是示例或者不完整的回答
- 建议用class将复杂的同一类功能包装成模块，方便扩展
"""

# 任务取名提示词
GET_TASK_NAME_PROMPT = """
为我下面这个任务取一个10个字以内的名字，方便我保存为文件。
# 任务
{question}

# 要求
- 你必须输出一个json,key为"task_name"，value为任务名
参考格式：
```json
{{
"task_name": "这是一个任务名"
}}
```
请输出：
"""


# 反思
REFLECTION_PROMPT = """
以下是针对我的任务的一个详细解决方案，请思考这个方案还有哪些地方可以完善、重新梳理的地方，最终输出一个优化后的方案给我。

# 我的问题
{question}

# 解决方案
{deepthink_result}

# 要求
- 首先你要找到该方案中不合理的地方，提出3-5个改进意见
- 然后提出其他地方3-10个可优化的地方，分点列举
- 根据上述所有意见，输出markdown格式的优化后的方案
参考输出：
```markdown
XXXX(这里是你优化后的方案)
```
- 注意：你必须保留原有方案中的各类特定细节，不能删除或更改
- 优化后的方案必须详细描述每个步骤，指令清晰，可操作性强
- 你需要针对问题所处领域做特定的优化
    
"""
